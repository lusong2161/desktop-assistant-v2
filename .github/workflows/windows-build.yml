name: Windows Build

on:
  push:
    branches: [ main, devin/1735116746-setup-github-actions-v2 ]
  pull_request:
    branches: [ main, devin/1735116746-setup-github-actions-v2 ]

env:
  VCPKG_ROOT: ${{ github.workspace }}\vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-windows
  VCPKG_INSTALLED_DIR: ${{ github.workspace }}\vcpkg_installed
  CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake
  BUILD_TYPE: Release
  SOLUTION_FILE_PATH: SmartAssistant.sln
  CMAKE_GENERATOR: "Visual Studio 17 2022"
  VCPKG_FEATURE_FLAGS: manifests,versions

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          ${{ github.workspace }}/vcpkg/installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Setup vcpkg
      shell: pwsh
      run: |
        Write-Host "Creating vcpkg directory..."
        New-Item -ItemType Directory -Force -Path "${{ env.VCPKG_ROOT }}"
        
        Write-Host "Cloning vcpkg..."
        git clone https://github.com/Microsoft/vcpkg.git "${{ env.VCPKG_ROOT }}"
        
        Write-Host "Setting up vcpkg..."
        Set-Location -Path "${{ env.VCPKG_ROOT }}"
        git checkout 2023.12.12
        
        Write-Host "Bootstrapping vcpkg..."
        & "${{ env.VCPKG_ROOT }}\bootstrap-vcpkg.bat" -disableMetrics
        
        Write-Host "Verifying vcpkg installation..."
        & "${{ env.VCPKG_ROOT }}\vcpkg.exe" version

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Setup VSBuild Tools
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Install Dependencies
      shell: pwsh
      run: |
        Write-Host "Setting up vcpkg integration..."
        & "${{ env.VCPKG_ROOT }}\vcpkg.exe" integrate install
        
        Write-Host "::group::Installing C++ Dependencies"
        Write-Host "Installing packages from vcpkg.json manifest..."
        & "${{ env.VCPKG_ROOT }}\vcpkg.exe" install --triplet=x64-windows
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::vcpkg install failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        
        Write-Host "::endgroup::"
        
        Write-Host "::group::Installing NuGet Packages"
        Set-Location -Path "${{ github.workspace }}"
        dotnet restore SmartAssistant.UI/SmartAssistant.UI.csproj
        dotnet restore SmartAssistant.UI.Tests/SmartAssistant.UI.Tests.csproj
        Write-Host "::endgroup::"

    - name: Build Core Library
      run: |
        cmake -B build -S . `
          -G "${{ env.CMAKE_GENERATOR }}" `
          -A x64 `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DVCPKG_TARGET_TRIPLET=x64-windows `
          -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}/installed/x64-windows" `
          -DBUILD_TESTING=OFF
        cmake --build build --config ${{ env.BUILD_TYPE }} --parallel --verbose

    - name: Build UI
      run: |
        msbuild SmartAssistant.sln /p:Configuration=${{ env.BUILD_TYPE }} /p:Platform=x64

    - name: Run Tests
      run: |
        cd build
        ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
        cd ..
        dotnet test SmartAssistant.UI.Tests/SmartAssistant.UI.Tests.csproj

    - name: Create Installer
      run: |
        cd installer
        .\build_installer.ps1 -Configuration ${{ env.BUILD_TYPE }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: SmartAssistant-Windows
        path: |
          installer/bin/${{ env.BUILD_TYPE }}/SmartAssistant-Setup.msi
          build/${{ env.BUILD_TYPE }}/SmartAssistant.Core.dll
          SmartAssistant.UI/bin/${{ env.BUILD_TYPE }}/net6.0-windows/SmartAssistant.UI.exe
