name: Windows Build

on:
  push:
    branches: [ main, 'devin/*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'
        
    - name: Setup VSBuild Tools
      uses: TheMrMilchmann/setup-msvc-dev@v2
      with:
        arch: x64
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.5'
        channel: 'stable'
        
    - name: Install Dependencies
      shell: pwsh
      run: |
        Set-Location -Path "smart-assistant"
        flutter config --enable-windows-desktop
        flutter pub get
        
    - name: Setup vcpkg
      shell: pwsh
      timeout-minutes: 15
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install
        $env:VCPKG_ROOT = Join-Path $env:GITHUB_WORKSPACE "vcpkg"
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        
    - name: Build Core Library
      shell: pwsh
      timeout-minutes: 20
      run: |
        $ErrorActionPreference = "Continue"
        $CorePath = Join-Path $env:GITHUB_WORKSPACE "SmartAssistant.Core"
        $BuildPath = Join-Path $CorePath "build"
        $VcpkgPath = Join-Path $env:GITHUB_WORKSPACE "vcpkg"
        $ToolchainPath = Join-Path $VcpkgPath "scripts\buildsystems\vcpkg.cmake"
        
        Write-Host "=== 环境变量和路径信息 ==="
        Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
        Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Host "Core Path: $CorePath"
        Write-Host "Build Path: $BuildPath"
        Write-Host "Toolchain Path: $ToolchainPath"
        
        Write-Host "`n=== 检查目录结构 ==="
        Get-ChildItem -Path $env:GITHUB_WORKSPACE -Depth 2
        
        if (-not (Test-Path $CorePath)) {
            Write-Error "Core目录未找到: $CorePath"
            exit 1
        }
        
        Write-Host "`n=== 准备构建目录 ==="
        Set-Location -Path $CorePath
        if (Test-Path $BuildPath) {
            Remove-Item -Path $BuildPath -Recurse -Force
            Write-Host "已清理旧的构建目录"
        }
        New-Item -ItemType Directory -Force -Path $BuildPath
        Set-Location -Path $BuildPath
        
        Write-Host "`n=== 运行CMake配置 ==="
        Write-Host "CMake版本信息:"
        cmake --version
        
        Write-Host "`n正在配置CMake..."
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE="$ToolchainPath" -DCMAKE_BUILD_TYPE=Release ..
        if ($LASTEXITCODE -ne 0) {
            Write-Host "CMake输出目录内容:"
            Get-ChildItem -Path . -Recurse
            Write-Host "CMake错误日志:"
            if (Test-Path "CMakeFiles/CMakeError.log") {
                Get-Content "CMakeFiles/CMakeError.log"
            }
            Write-Error "CMake配置失败"
            exit 1
        }
        
        Write-Host "`n=== 开始构建项目 ==="
        cmake --build . --config Release --verbose
        if ($LASTEXITCODE -ne 0) {
            Write-Host "构建错误日志:"
            Get-ChildItem -Path . -Filter *.log -Recurse | ForEach-Object {
                Write-Host "`n=== $($_.FullName) ===="
                Get-Content $_.FullName
            }
            Write-Error "CMake构建失败"
            exit 1
        }
        
        Write-Host "`n=== 构建完成 ==="
        Write-Host "输出文件列表:"
        Get-ChildItem -Path . -Recurse -Filter *.exe
        Get-ChildItem -Path . -Recurse -Filter *.dll
        
    - name: Build Flutter App
      shell: pwsh
      timeout-minutes: 15
      run: |
        Set-Location -Path "smart-assistant"
        flutter config --enable-windows-desktop
        flutter build windows --release
        
    - name: Run Tests
      shell: pwsh
      timeout-minutes: 10
      run: |
        Set-Location -Path "smart-assistant"
        Write-Host "=== 开始运行Flutter测试 ==="
        Write-Host "Flutter版本信息:"
        flutter --version
        
        Write-Host "`n=== 运行测试用例 ==="
        flutter test --verbose --coverage --machine > test_output.json
        if ($LASTEXITCODE -ne 0) {
            Write-Host "`n=== 测试失败，输出详细信息 ==="
            Get-Content test_output.json
            exit 1
        }
        
        Write-Host "`n=== 测试完成 ==="
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: smart-assistant/build/windows/runner/Release/
